package com.cloudsecure.backend.services;

import com.cloudsecure.backend.models.Question;
import com.cloudsecure.backend.repositories.QuestionRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Collections;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

@Service
public class QuestionService {
    @Autowired
    private QuestionRepository questionRepository;

    public List<Question> getRandomQuestions(int number) {
        List<Question> all = questionRepository.findAll();
        Collections.shuffle(all);
        return all.stream().limit(number).toList();
    }

    public List<Question> getQuestionsByCategory(String category, int number) {
        List<Question> all = questionRepository.findByCategory(category);
        Collections.shuffle(all);
        return all.stream().limit(number).toList();
    }

    public int seedDefaultQuestions() {
        AtomicInteger inserted = new AtomicInteger(0);

        // üîê Gestion des acc√®s
        inserted.addAndGet(insertIfMissing("Votre organisation utilise-t-elle l‚Äôauthentification multi-facteurs (MFA) pour l‚Äôacc√®s au cloud ?", "Gestion des acc√®s", 2));
        inserted.addAndGet(insertIfMissing("Les comptes √† privil√®ges sont-ils r√©guli√®rement audit√©s et surveill√©s ?", "Gestion des acc√®s", 2));
        inserted.addAndGet(insertIfMissing("Un principe du moindre privil√®ge est-il appliqu√© pour les utilisateurs et services ?", "Gestion des acc√®s", 2));

        // ‚òÅÔ∏è Protection des donn√©es
        inserted.addAndGet(insertIfMissing("Les donn√©es sensibles sont-elles chiffr√©es au repos (at rest) ?", "Protection des donn√©es", 2));
        inserted.addAndGet(insertIfMissing("Les communications r√©seau entre services cloud sont-elles chiffr√©es (TLS/SSL) ?", "Protection des donn√©es", 2));
        inserted.addAndGet(insertIfMissing("Des politiques de sauvegarde et de restauration sont-elles d√©finies et test√©es r√©guli√®rement ?", "Protection des donn√©es", 2));

        // üõ°Ô∏è S√©curit√© r√©seau
        inserted.addAndGet(insertIfMissing("Un pare-feu ou un WAF (Web Application Firewall) est-il configur√© dans votre infrastructure cloud ?", "S√©curit√© r√©seau", 2));
        inserted.addAndGet(insertIfMissing("Les acc√®s r√©seau sont-ils restreints par des r√®gles de s√©curit√© bas√©es sur les IP et ports ?", "S√©curit√© r√©seau", 2));
        inserted.addAndGet(insertIfMissing("Un syst√®me de d√©tection d‚Äôintrusion (IDS/IPS) est-il mis en place pour le cloud ?", "S√©curit√© r√©seau", 2));

        // üìä Conformit√© & gouvernance
        inserted.addAndGet(insertIfMissing("Votre organisation suit-elle des normes de conformit√© (ISO 27001, GDPR, SOC2, etc.) pour le cloud ?", "Conformit√© & gouvernance", 2));
        inserted.addAndGet(insertIfMissing("Un plan de r√©ponse aux incidents cloud est-il document√© et test√© r√©guli√®rement ?", "Conformit√© & gouvernance", 2));
        inserted.addAndGet(insertIfMissing("Les journaux (logs) cloud sont-ils collect√©s, centralis√©s et analys√©s ?", "Conformit√© & gouvernance", 2));

        return inserted.get();
    }

    private int insertIfMissing(String text, String category, int riskWeight) {
        if (questionRepository.existsByText(text)) {
            return 0;
        }
        Question q = new Question();
        q.setText(text);
        q.setCategory(category);
        q.setRiskWeight(riskWeight);
        questionRepository.save(q);
        return 1;
    }
}
